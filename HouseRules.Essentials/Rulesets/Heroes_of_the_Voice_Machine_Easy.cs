namespace HouseRules.Essentials.Rulesets
{
    using System.Collections.Generic;
    using Boardgame.Board;
    using Boardgame.BoardEntities;
    using DataKeys;
    using global::Types;
    using HouseRules.Core.Types;
    using HouseRules.Essentials.Rules;

    internal static class Heroes_of_the_Voice_Machine_Easy
    {
        internal static Ruleset Create()
        {
            // Heroes of the Voice Machine Easy PROGRESSIVE
            // by BobtheBunny  version 1.2
            const string name = "Heroes of the Voice Machine (EASY PROGRESSIVE)";
            const string description = "The adventure begins.. take (slighty less of) a chance, roll the dice.";
            const string longdesc = "Many thanks to TheGrayAlien!\nThis is a rebuild of BobtheBunnys Legend of the Voice Machine mod with the leveling features of the DemeoRevolutions Progressive mods.\nEasy mode: You will skip the first floor and Heroes start at level 3. Experience gains faster.\n\nTheme is based on a popular TTRPG stream by a bunch of nerdy voice actors and their hit animated series.\n\nSorcerer\nThe snarky and witty gunslinger. Descendant of royalty and tragedy, his soul is corrupt.\n\nGuardian\nUnsure and often unreliable, but always lovable cleric. She is every bit as much a warrior as a healer.\n\nBarbarian\nMuscles, big weapon, yells a lot, and always fond of ale. He would like to rage.\n\nBard\nGird your loins and tap your toes, this clever artist can weave melodies and magic to aid his friends in battle.\n\nHunter\nA powerful druid if she had more confidence in herself. Her people count on her to lead some day, but for now just try not to die.\n\nAssassin\nMove fast and strike with dagger-dagger-dagger. He's got a few tricks up his sleeve and feathers in his cloak.\n\nWarlock\nArcher with a pet bear. Which one has a more pleasant attitude? You wont have time to ask before you are marked for death.";

            var piecesAdjustedRule = new PieceConfigAdjustedRule(new List<PieceConfigAdjustedRule.PieceProperty>
            {
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SellswordArbalestierActive, Property = "StartHealth", Value = 8 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SellswordArbalestierActive, Property = "MoveRange", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroBarbarian, Property = "StartHealth", Value = 17 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroBarbarian, Property = "CriticalHitDamage", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroBarbarian, Property = "BerserkBelowHealth", Value = 0.81f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroGuardian, Property = "MoveRange", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroRogue, Property = "MoveRange", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroWarlock, Property = "StartHealth", Value = 15 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroBard, Property = "StartHealth", Value = 15 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroGuardian, Property = "StartHealth", Value = 16 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroRogue, Property = "StartHealth", Value = 16 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroHunter, Property = "StartHealth", Value = 15 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroSorcerer, Property = "StartHealth", Value = 15 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroSorcerer, Property = "CriticalHitDamage", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroWarlock, Property = "AttackDamage", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroWarlock, Property = "CriticalHitDamage", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroHunter, Property = "AttackDamage", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroBard, Property = "AttackDamage", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroBard, Property = "CriticalHitDamage", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroGuardian, Property = "CriticalHitDamage", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroRogue, Property = "CriticalHitDamage", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HeroHunter, Property = "CriticalHitDamage", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WarlockMinion, Property = "AttackDamage", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WarlockMinion, Property = "StartHealth", Value = 8 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Verochka, Property = "StartHealth", Value = 14 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Verochka, Property = "BerserkBelowHealth", Value = 0.35f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Verochka, Property = "AttackDamage", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Tornado, Property = "ActionPoint", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Tornado, Property = "AliveForRounds", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Barricade, Property = "StartHealth", Value = 12 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Lure, Property = "StartHealth", Value = 12 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HealingBeacon, Property = "StartHealth", Value = 10 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.HealingBeacon, Property = "AliveForRounds", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SmiteWard, Property = "StartHealth", Value = 12 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SmiteWard, Property = "AttackDamage", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SwordOfAvalon, Property = "StartHealth", Value = 12 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.PoisonousRat, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.PoisonousRat, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.PoisonousRat, Property = "StartHealth", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "BerserkBelowHealth", Value = 0.2f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "StartHealth", Value = 13 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "AttackDamage", Value = 7 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "MoveRange", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Mimic, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "StartHealth", Value = 100 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "PowerIndex", Value = 6 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "ActionPoint", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "BerserkBelowHealth", Value = 0.90f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenQueen, Property = "MagicBonus", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BossTown, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BossTown, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BossTown, Property = "StartHealth", Value = 160 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BossTown, Property = "PowerIndex", Value = 6 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BossTown, Property = "BerserkBelowHealth", Value = 0.75f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BossTown, Property = "MoveRange", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MadElvenKingHandLeft, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MadElvenKingHandLeft, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MadElvenKingHandRight, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MadElvenKingHandRight, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootLord, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootLord, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootLord, Property = "StartHealth", Value = 98 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootLord, Property = "PowerIndex", Value = 6 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootLord, Property = "ActionPoint", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "StartHealth", Value = 80 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "PowerIndex", Value = 6 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "BerserkBelowHealth", Value = 0.75f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "ActionPoint", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.MotherCy, Property = "MagicBonus", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "StartHealth", Value = 115 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "PowerIndex", Value = 6 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "ActionPoint", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "MoveRange", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatKing, Property = "BerserkBelowHealth", Value = 0.90f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WizardBoss, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WizardBoss, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WizardBoss, Property = "StartHealth", Value = 135 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WizardBoss, Property = "PowerIndex", Value = 6 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WizardBoss, Property = "ActionPoint", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.WizardBoss, Property = "MagicBonus", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeBoss, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeBoss, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeBoss, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeBoss, Property = "ActionPoint", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeBoss, Property = "AttackDamage", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeTailBoss, Property = "PowerIndex", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeTailBoss, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SnakeTailBoss, Property = "MagicBonus", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "StartHealth", Value = 18 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "MoveRange", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "BarkArmor", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "BerserkBelowHealth", Value = 0.35f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Wyvern, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.EarthElemental, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.EarthElemental, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.EarthElemental, Property = "AttackDamage", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.EarthElemental, Property = "PowerIndex", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SilentSentinel, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SilentSentinel, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SilentSentinel, Property = "PowerIndex", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SilentSentinel, Property = "StartHealth", Value = 12 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Brookmare, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Brookmare, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Brookmare, Property = "PowerIndex", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BigBoiMutant, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BigBoiMutant, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BigBoiMutant, Property = "StartHealth", Value = 35 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.BigBoiMutant, Property = "PowerIndex", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Cavetroll, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Cavetroll, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Cavetroll, Property = "StartHealth", Value = 45 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Cavetroll, Property = "PowerIndex", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Gorgon, Property = "StartHealth", Value = 5 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Gorgon, Property = "AttackDamage", Value = 7 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Gorgon, Property = "BerserkBelowHealth", Value = 0.99f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Gorgon, Property = "StartArmor", Value = 13 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenMarauder, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenMarauder, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenMarauder, Property = "StartHealth", Value = 25 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenMarauder, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenMarauder, Property = "BerserkBelowHealth", Value = .5f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSlime, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSlime, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSlime, Property = "StartHealth", Value = 22 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSlime, Property = "PowerIndex", Value = 2 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSlime, Property = "BerserkBelowHealth", Value = .5f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSpider, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSpider, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSpider, Property = "StartHealth", Value = 25 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSpider, Property = "MoveRange", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GiantSpider, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Sigataur, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Sigataur, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Sigataur, Property = "StartHealth", Value = 30 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Sigataur, Property = "PowerIndex", Value = 4 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootGolem, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootGolem, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootGolem, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootGolem, Property = "BerserkBelowHealth", Value = .5f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ServantOfAlfaragh, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ServantOfAlfaragh, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ServantOfAlfaragh, Property = "PowerIndex", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ServantOfAlfaragh, Property = "StartHealth", Value = 27 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSkirmisher, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSkirmisher, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSkirmisher, Property = "BerserkBelowHealth", Value = .75f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ScabRat, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ScabRat, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ScabRat, Property = "StartHealth", Value = 8 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinMadUn, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinMadUn, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinMadUn, Property = "StartHealth", Value = 15 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinMadUn, Property = "BerserkBelowHealth", Value = .75f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ReptileArcher, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ReptileArcher, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ReptileMutantWizard, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ReptileMutantWizard, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GeneralRonthian, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GeneralRonthian, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.TheUnheard, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.TheUnseen, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.TheUnseen, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.TheUnspoken, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootBeast, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootBeast, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootHound, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootHound, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootMage, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RootMage, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.DruidArcher, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.DruidArcher, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.DruidHoundMaster, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.DruidHoundMaster, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinChieftan, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinChieftan, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinFighter, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinFighter, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinRanger, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.GoblinRanger, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Spider, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Spider, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Rat, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Rat, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Slimeling, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Slimeling, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Bandit, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Bandit, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Thug, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.Thug, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenArcher, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenArcher, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenCultist, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenCultist, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenHound, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenHound, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenMystic, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenPriest, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenPriest, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSpearman, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSpearman, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSummoner, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ElvenSummoner, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.CultMemberElder, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.CultMemberElder, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.KillerBee, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.KillerBee, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.KillerBee, Property = "AcidSlimeTrailChance", Value = 0.45f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.KillerBee, Property = "BerserkBelowHealth", Value = 0.51f },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.FireElemental, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.FireElemental, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.IceElemental, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.IceElemental, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ChestGoblin, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ChestGoblin, Property = "PreciseAttack", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.ChestGoblin, Property = "MoveRange", Value = 3 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.LargeCorruption, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SmallCorruption, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.RatNest, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SummoningRiftBig, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SummoningRiftMedium, Property = "PreciseHealth", Value = 1 },
                new PieceConfigAdjustedRule.PieceProperty { Piece = BoardPieceId.SummoningRiftSmall, Property = "PreciseHealth", Value = 1 },
            });
            var barbarianCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Grapple, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyJavelin, ReplenishFrequency = 2 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.PlayerLeap, ReplenishFrequency = 3 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.TauntingScream, ReplenishFrequency = 3 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.WeakeningShout, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.GrapplingSmash, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.SpawnRandomLamp, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.GrapplingTotem, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.ExplodingLampPlaceholder, ReplenishFrequency = 1 },
            };
            var warlockCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.MagicMissile, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.MinionCharge, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyArrow, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyFireball, ReplenishFrequency = 2 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyFrostball, ReplenishFrequency = 2 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HuntersMark, ReplenishFrequency = 3 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HailOfArrows, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.PoisonedTip, ReplenishFrequency = 0 },
            };
            var bardCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.CourageShanty, ReplenishFrequency = 1 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.ScrollElectricity, ReplenishFrequency = 4 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.DrainingKiss, ReplenishFrequency = 2 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.TeleportLamp, ReplenishFrequency = 2 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Weaken, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.BlindingLight, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.FretsOfFire, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.PoisonBomb, ReplenishFrequency = 0 },
            };
            var guardianCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.BlindingLight, ReplenishFrequency = 2 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.ReplenishArmor, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.TurretHealProjectile, ReplenishFrequency = 3 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Zap, ReplenishFrequency = 2 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.MagicShield, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.DropChest, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Charge, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.BottleOfLye, ReplenishFrequency = 0 },
            };
            var hunterCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.LetItRain, ReplenishFrequency = 4 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.TornadoCharge, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Whip, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyFrostball, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Freeze, ReplenishFrequency = 4 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.WaterDive, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.WaterDive, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.BeastWhisperer, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Shockwave, ReplenishFrequency = 0 },
            };
            var assassinCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Sneak, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.ExtraActionPotion, ReplenishFrequency = 4 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyFireball, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyJavelin, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.DiseasedBite, ReplenishFrequency = 1 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Blink, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.WhirlwindAttack, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.BoobyTrap, ReplenishFrequency = 0 },
            };
            var sorcererCards = new List<StartCardsModifiedRule.CardConfig>
            {
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.HealingPotion, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.EnemyArrow, ReplenishFrequency = 1 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.TurretHighDamageProjectile, ReplenishFrequency = 3 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Electricity, ReplenishFrequency = 3 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.SnakeBossLongRange, ReplenishFrequency = 2 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.Implode, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.ImplosionExplosionRain, ReplenishFrequency = 0 },
                // new StartCardsModifiedRule.CardConfig { Card = AbilityKey.MissileSwarm, ReplenishFrequency = 0 },
                new StartCardsModifiedRule.CardConfig { Card = AbilityKey.ScrollOfCharm, ReplenishFrequency = 0 },
            };
            // Heroes changes.
            var startingCardsRule = new StartCardsModifiedRule(new Dictionary<BoardPieceId, List<StartCardsModifiedRule.CardConfig>>
            {
                { BoardPieceId.HeroWarlock, warlockCards },
                { BoardPieceId.HeroBard, bardCards },
                { BoardPieceId.HeroGuardian, guardianCards },
                { BoardPieceId.HeroHunter, hunterCards },
                { BoardPieceId.HeroRogue, assassinCards },
                { BoardPieceId.HeroSorcerer, sorcererCards },
                { BoardPieceId.HeroBarbarian, barbarianCards },
            });

            var allowedChestCardsRule = new CardChestAdditionOverriddenRule(new Dictionary<BoardPieceId, List<AbilityKey>>
            {
                {
                    BoardPieceId.HeroBarbarian, new List<AbilityKey>
                    {
                        AbilityKey.DropChest,
                        AbilityKey.DropChest,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.Charge,
                        AbilityKey.Charge,
                        AbilityKey.Charge,
                        AbilityKey.Charge,
                        AbilityKey.FretsOfFire,
                        AbilityKey.FretsOfFire,
                        AbilityKey.MarkOfVerga,
                        AbilityKey.MarkOfVerga,
                        AbilityKey.MarkOfVerga,
                        AbilityKey.MarkOfVerga,
                        AbilityKey.MarkOfVerga,
                        AbilityKey.GrapplingPush,
                        AbilityKey.GrapplingPush,
                        AbilityKey.GrapplingPush,
                        AbilityKey.GrapplingPush,
                        AbilityKey.GrapplingSmash,
                        AbilityKey.GrapplingSmash,
                        AbilityKey.GrapplingSmash,
                        AbilityKey.GrapplingSmash,
                        AbilityKey.GrapplingSmash,
                        AbilityKey.GrapplingSmash,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare bonus cards.
                        AbilityKey.Sneak,
                        AbilityKey.CourageShanty,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
                {
                    BoardPieceId.HeroGuardian, new List<AbilityKey>
                    {
                        AbilityKey.Rejuvenation,
                        AbilityKey.Rejuvenation,
                        AbilityKey.OneMoreThing,
                        AbilityKey.Teleportation,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.Overcharge,
                        AbilityKey.Overcharge,
                        AbilityKey.Overcharge,
                        AbilityKey.HeavensFury,
                        AbilityKey.HeavensFury,
                        AbilityKey.HeavensFury,
                        AbilityKey.ShatteringVoice,
                        AbilityKey.ShatteringVoice,
                        AbilityKey.LeapHeavy,
                        AbilityKey.LeapHeavy,
                        AbilityKey.LeapHeavy,
                        AbilityKey.LeapHeavy,
                        AbilityKey.Grab,
                        AbilityKey.Grab,
                        AbilityKey.WarCry,
                        AbilityKey.WarCry,
                        AbilityKey.WarCry,
                        AbilityKey.TheBehemoth,
                        AbilityKey.TheBehemoth,
                        AbilityKey.TheBehemoth,
                        AbilityKey.PiercingThrow,
                        AbilityKey.PiercingThrow,
                        AbilityKey.PiercingThrow,
                        AbilityKey.PiercingThrow,
                        AbilityKey.HealingWard,
                        AbilityKey.HealingWard,
                        AbilityKey.HealingWard,
                        AbilityKey.HealingWard,
                        AbilityKey.HealingWard,
                        AbilityKey.PiercingThrow,
                        AbilityKey.PiercingThrow,
                        AbilityKey.PiercingThrow,
                        AbilityKey.PiercingThrow,
                        AbilityKey.SongOfResilience,
                        AbilityKey.SongOfResilience,
                        AbilityKey.SongOfResilience,
                        AbilityKey.SongOfResilience,
                        AbilityKey.SongOfRecovery,
                        AbilityKey.SongOfRecovery,
                        AbilityKey.DropChest,
                        AbilityKey.DropChest,
                        AbilityKey.DropChest,
                        AbilityKey.DropChest,
                        // rare bonus cards.
                        AbilityKey.Sneak,
                        AbilityKey.CourageShanty,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
                {
                    BoardPieceId.HeroBard, new List<AbilityKey>
                    {
                        AbilityKey.Rejuvenation,
                        AbilityKey.Rejuvenation,
                        AbilityKey.TurretHealProjectile,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.PanicPowder,
                        AbilityKey.Portal,
                        AbilityKey.Portal,
                        AbilityKey.Portal,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.SongOfRecovery,
                        AbilityKey.SongOfRecovery,
                        AbilityKey.SongOfRecovery,
                        AbilityKey.BlockAbilities,
                        AbilityKey.BlockAbilities,
                        AbilityKey.PiercingVoice,
                        AbilityKey.PiercingVoice,
                        AbilityKey.ShatteringVoice,
                        AbilityKey.ShatteringVoice,
                        AbilityKey.ShatteringVoice,
                        AbilityKey.ShatteringVoice,
                        AbilityKey.MissileSwarm,
                        AbilityKey.MissileSwarm,
                        AbilityKey.MissileSwarm,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.MagicShield,
                        AbilityKey.MagicShield,
                        AbilityKey.BlindingLight,
                        AbilityKey.BlindingLight,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare bonus cards.
                        AbilityKey.Sneak,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
                {
                    BoardPieceId.HeroHunter, new List<AbilityKey>
                    {
                        AbilityKey.HealingPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.TurretHealProjectile,
                        AbilityKey.WebBomb,
                        AbilityKey.WebBomb,
                        AbilityKey.WebBomb,
                        AbilityKey.Teleportation,
                        AbilityKey.Teleportation,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.ScrollTsunami,
                        AbilityKey.ScrollTsunami,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.Deflect,
                        AbilityKey.Deflect,
                        AbilityKey.Deflect,
                        AbilityKey.Fireball,
                        AbilityKey.Fireball,
                        AbilityKey.Fireball,
                        AbilityKey.Fireball,
                        AbilityKey.Fireball,
                        AbilityKey.Shockwave,
                        AbilityKey.Shockwave,
                        AbilityKey.Shockwave,
                        AbilityKey.MagicBarrier,
                        AbilityKey.MagicBarrier,
                        AbilityKey.MagicBarrier,
                        AbilityKey.MagicBarrier,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.BeastWhisperer,
                        AbilityKey.BeastWhisperer,
                        AbilityKey.BeastWhisperer,
                        AbilityKey.BeastWhisperer,
                        AbilityKey.Overcharge,
                        // AbilityKey.Overcharge,
                        // AbilityKey.Petrify,
                        // AbilityKey.Petrify,
                        // AbilityKey.Petrify,
                        AbilityKey.WaterDive,
                        AbilityKey.WaterDive,
                        AbilityKey.WaterDive,
                        AbilityKey.WaterDive,
                        AbilityKey.Tsunami,
                        AbilityKey.Tsunami,
                        AbilityKey.WaterDive,
                        // AbilityKey.AcidSpit,
                        // AbilityKey.AcidSpit,
                        // AbilityKey.AcidSpit,
                        AbilityKey.Freeze,
                        AbilityKey.Freeze,
                        AbilityKey.EarthShatter,
                        // rare bonus cards.
                        AbilityKey.CourageShanty,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
                {
                    BoardPieceId.HeroRogue, new List<AbilityKey>
                    {
                        AbilityKey.OneMoreThing,
                        AbilityKey.HeavensFury,
                        AbilityKey.HeavensFury,
                        AbilityKey.StrengthPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.FlashBomb,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.DrainingKiss,
                        AbilityKey.DrainingKiss,
                        AbilityKey.Implode,
                        AbilityKey.Blink,
                        AbilityKey.Blink,
                        AbilityKey.Blink,
                        AbilityKey.Blink,
                        AbilityKey.Blink,
                        AbilityKey.Blink,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.FlashBomb,
                        AbilityKey.FlashBomb,
                        AbilityKey.GuidingLight,
                        AbilityKey.GuidingLight,
                        AbilityKey.CursedDagger,
                        AbilityKey.CursedDagger,
                        AbilityKey.CursedDagger,
                        AbilityKey.CursedDagger,
                        AbilityKey.CursedDagger,
                        AbilityKey.CursedDagger,
                        AbilityKey.BoobyTrap,
                        AbilityKey.BoobyTrap,
                        AbilityKey.BoobyTrap,
                        AbilityKey.BoobyTrap,
                        AbilityKey.FlashBomb,
                        AbilityKey.FlashBomb,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.WhirlwindAttack,
                        // rare bonus cards.
                        AbilityKey.CourageShanty,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
                {
                    BoardPieceId.HeroSorcerer, new List<AbilityKey>
                    {
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.HeavensFury,
                        AbilityKey.HealingPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.MagicPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.BoobyTrap,
                        AbilityKey.BoobyTrap,
                        AbilityKey.BoobyTrap,
                        AbilityKey.BoobyTrap,
                        AbilityKey.PoisonBomb,
                        AbilityKey.PoisonBomb,
                        AbilityKey.FlashBomb,
                        AbilityKey.FlashBomb,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Fireball,
                        AbilityKey.Electricity,
                        AbilityKey.Electricity,
                        AbilityKey.Electricity,
                        AbilityKey.LightningBolt,
                        AbilityKey.Shuffle,
                        AbilityKey.Shuffle,
                        AbilityKey.WaterBottle,
                        AbilityKey.Banish,
                        AbilityKey.Banish,
                        AbilityKey.Banish,
                        AbilityKey.MissileSwarm,
                        AbilityKey.MissileSwarm,
                        AbilityKey.MissileSwarm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ImplosionExplosionRain,
                        AbilityKey.ImplosionExplosionRain,
                        AbilityKey.Implode,
                        AbilityKey.Implode,
                        AbilityKey.Implode,
                        AbilityKey.Vortex,
                        AbilityKey.Vortex,
                        AbilityKey.Vortex,
                        AbilityKey.Vortex,
                        // rare bonus cards.
                        AbilityKey.CourageShanty,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
                {
                    BoardPieceId.HeroWarlock, new List<AbilityKey>
                    {
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.VigorPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.DamageResistPotion,
                        AbilityKey.Portal,
                        AbilityKey.Portal,
                        AbilityKey.Portal,
                        AbilityKey.Portal,
                        AbilityKey.Portal,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.ScrollOfCharm,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.PoisonedTip,
                        AbilityKey.Barrage,
                        AbilityKey.WarCry,
                        AbilityKey.WarCry,
                        AbilityKey.Sneak,
                        AbilityKey.Sneak,
                        AbilityKey.GuidingLight,
                        // AbilityKey.HailOfArrows,
                        AbilityKey.SpawnGoldPile,
                        AbilityKey.SpawnGoldPile,
                        AbilityKey.SpawnGoldPile,
                        AbilityKey.SpawnGoldPile, //card says 'jeweled scarab', no image, it spawns gold though.
                        // rare bonus cards.
                        AbilityKey.Sneak,
                        AbilityKey.CourageShanty,
                        AbilityKey.Charge,
                        AbilityKey.FlashBomb,
                    }
                },
            });

            var allowedEnergyCardsRule = new CardEnergyAdditionOverriddenRule(new Dictionary<BoardPieceId, List<AbilityKey>>
            {
                {
                    BoardPieceId.HeroBarbarian, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.Zap,
                    }
                },
                {
                    BoardPieceId.HeroGuardian, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.Rejuvenation,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                    }
                },
                {
                    BoardPieceId.HeroBard, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.Rejuvenation,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.Zap,
                    }
                },
                {
                    BoardPieceId.HeroHunter, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.HealingPotion,
                        AbilityKey.Rejuvenation,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.Zap,
                    }
                },
                {
                    BoardPieceId.HeroRogue, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.Zap,
                    }
                },
                {
                    BoardPieceId.HeroSorcerer, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.Zap,
                    }
                },
                {
                    BoardPieceId.HeroWarlock, new List<AbilityKey>
                    {
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.Bone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.WoodenBone,
                        AbilityKey.BottleOfLye,
                        AbilityKey.BottleOfLye,
                        AbilityKey.Weaken,
                        AbilityKey.Weaken,
                        AbilityKey.PanicPowder,
                        AbilityKey.PanicPowder,
                        AbilityKey.VortexDust,
                        AbilityKey.Regroup,
                        AbilityKey.Regroup,
                        AbilityKey.Teleportation,
                        AbilityKey.HealingPotion,
                        AbilityKey.DetectEnemies,
                        AbilityKey.DetectEnemies,
                        AbilityKey.RevealPath,
                        AbilityKey.Barricade,
                        AbilityKey.OneMoreThing,
                        AbilityKey.OneMoreThing,
                        AbilityKey.VigorPotion,
                        AbilityKey.IceImmunePotion,
                        AbilityKey.FireImmunePotion,
                        AbilityKey.Antitoxin,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.WaterBottle,
                        AbilityKey.AdamantPotion,
                        AbilityKey.HeavensFury,
                        AbilityKey.Tsunami,
                        AbilityKey.TheBehemoth,
                        AbilityKey.RepeatingBallista,
                        AbilityKey.Lure,
                        AbilityKey.SpawnRandomLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.GasLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.IceLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.OilLamp,
                        AbilityKey.VortexLamp,
                        AbilityKey.VortexLamp,
                        // rare class cards, for overlap
                        AbilityKey.Grab,
                        AbilityKey.CourageShanty,
                        AbilityKey.CallCompanion,
                        AbilityKey.PoisonBomb,
                        AbilityKey.ScrollElectricity,
                        AbilityKey.WhirlwindAttack,
                        AbilityKey.Zap,
                    }
                },
            });

            var allowedPotionsRule = new PotionAdditionOverriddenRule(new Dictionary<BoardPieceId, List<AbilityKey>>
            {
                {
                    BoardPieceId.HeroBarbarian, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
                {
                    BoardPieceId.HeroBard, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
                {
                    BoardPieceId.HeroGuardian, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
                {
                    BoardPieceId.HeroHunter, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
                {
                    BoardPieceId.HeroRogue, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
                {
                    BoardPieceId.HeroSorcerer, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
                {
                    BoardPieceId.HeroWarlock, new List<AbilityKey>
                    {
                        AbilityKey.DamageResistPotion,
                        AbilityKey.InvisibilityPotion,
                        AbilityKey.AdamantPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.LuckPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.ExtraActionPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.StrengthPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.SwiftnessPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.MagicPotion,
                        AbilityKey.VigorPotion,
                    }
                },
            });

            var pieceAbilityRule = new PieceAbilityListOverriddenRule(new Dictionary<BoardPieceId, List<AbilityKey>>
            {
                { BoardPieceId.Mimic, new List<AbilityKey> { AbilityKey.AcidSpit, AbilityKey.LeapHeavy, AbilityKey.SpawnGoldPile } },
                { BoardPieceId.Cavetroll, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.ElvenKingMeleeWhip } },
                { BoardPieceId.ElvenMystic, new List<AbilityKey> { AbilityKey.TeleportLamp, AbilityKey.TeleportEnemy, AbilityKey.Electricity } },
                { BoardPieceId.RootMage, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.TeleportEnemy, AbilityKey.TeleportLamp, AbilityKey.Electricity } },
                { BoardPieceId.ChestGoblin, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.EnemyStealGold } },
                { BoardPieceId.KillerBee, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.ThornPowder, AbilityKey.Net } },
                { BoardPieceId.CultMemberElder, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.Weaken, AbilityKey.EnemyFireball } },
                { BoardPieceId.Wyvern, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.DiseasedBite, AbilityKey.LightningBolt, AbilityKey.LeapHeavy, AbilityKey.Grapple } },
                { BoardPieceId.SilentSentinel, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.ElvenSummonerDeflect, AbilityKey.Blink } },
                { BoardPieceId.ReptileMutantWizard, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.Deflect, AbilityKey.DrainingKiss, AbilityKey.Electricity } },
                { BoardPieceId.GiantSpider, new List<AbilityKey> { AbilityKey.EnemyKnockbackMelee, AbilityKey.SpiderWebshot, AbilityKey.Grab, AbilityKey.PoisonBomb } },
                { BoardPieceId.ScabRat, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.DiseasedBiteKnockback } },
                { BoardPieceId.ElvenQueen, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.TeleportLamp, AbilityKey.ElvenSummonerDeflect, AbilityKey.DrainingKiss, AbilityKey.Electricity, AbilityKey.AcidSpit, AbilityKey.EnemyFireball, AbilityKey.Grab, AbilityKey.LeapHeavy } },
                { BoardPieceId.RatKing, new List<AbilityKey> { AbilityKey.EnemyMelee, AbilityKey.ElvenKingMeleeWhip, AbilityKey.AcidSpit, AbilityKey.EarthShatter, AbilityKey.PoisonBomb, AbilityKey.RatBomb, AbilityKey.RatFrenzy, AbilityKey.RatWhisperer, AbilityKey.WaterDive } },
            });

            var pieceBehaviourListRule = new PieceBehavioursListOverriddenRule(new Dictionary<BoardPieceId, List<Behaviour>>
            {
                { BoardPieceId.ElvenSkirmisher, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackPlayer, Behaviour.PikeAttack } },
                { BoardPieceId.ReptileMutantWizard, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackAndRetreat, Behaviour.CastOnTeam, Behaviour.RangedAttackHighPrio, Behaviour.RangedSpellCaster } },
                { BoardPieceId.RootMage, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackAndRetreat, Behaviour.CastOnTeam, Behaviour.RangedAttackHighPrio, Behaviour.RangedSpellCaster } },
                { BoardPieceId.SilentSentinel, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackPlayer, Behaviour.RangedSpellCaster, Behaviour.ElvenSummonerBehaviour } },
                { BoardPieceId.SandScorpion, new List<Behaviour> { Behaviour.Patrol, Behaviour.FollowPlayerMeleeAttacker, Behaviour.AttackAndRetreat } },
                { BoardPieceId.JeweledScarab, new List<Behaviour> { Behaviour.Patrol, Behaviour.FleeToFOW } },
                { BoardPieceId.GiantSpider, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackPlayer, Behaviour.RangedAttackHighPrio, Behaviour.HostileTowardsEntangled } },
                { BoardPieceId.GiantSlime, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackPlayer, Behaviour.RangedAttackHighPrio } },
                { BoardPieceId.Cavetroll, new List<Behaviour> { Behaviour.Patrol, Behaviour.AttackPlayer, Behaviour.RangedAttackHighPrio } },
                { BoardPieceId.ElvenQueen, new List<Behaviour> { Behaviour.Patrol, Behaviour.RangedSpellCaster, Behaviour.ElvenSummonerBehaviour } },
            });

            var pieceImmunityRule = new PieceImmunityListAdjustedRule(new Dictionary<BoardPieceId, List<EffectStateType>>
            {
                { BoardPieceId.HeroBarbarian, new List<EffectStateType> { EffectStateType.Frozen, EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns } },
                { BoardPieceId.HeroSorcerer, new List<EffectStateType> { EffectStateType.Stunned, EffectStateType.Wet } },
                { BoardPieceId.HeroHunter, new List<EffectStateType> { EffectStateType.Frozen, EffectStateType.Tangled, EffectStateType.Wet } },
                { BoardPieceId.HeroGuardian, new List<EffectStateType> { EffectStateType.Stunned, EffectStateType.Venom } },
                { BoardPieceId.HeroBard, new List<EffectStateType> { EffectStateType.Diseased } },
                { BoardPieceId.HeroRogue, new List<EffectStateType> { EffectStateType.Diseased } },
                { BoardPieceId.HeroWarlock, new List<EffectStateType> { EffectStateType.CorruptedRage, EffectStateType.Thorns } },
                { BoardPieceId.WarlockMinion, new List<EffectStateType> { EffectStateType.CorruptedRage, EffectStateType.Stunned, EffectStateType.Diseased } },
                { BoardPieceId.OilLamp, new List<EffectStateType> { EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns, EffectStateType.Wet } },
                { BoardPieceId.GasLamp, new List<EffectStateType> { EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns, EffectStateType.Wet } },
                { BoardPieceId.IceLamp, new List<EffectStateType> { EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns, EffectStateType.Wet } },
                { BoardPieceId.VortexLamp, new List<EffectStateType> { EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns, EffectStateType.Wet } },
                { BoardPieceId.WaterLamp, new List<EffectStateType> { EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns, EffectStateType.Wet } },
                { BoardPieceId.SellswordArbalestierActive, new List<EffectStateType> { EffectStateType.CorruptedRage, EffectStateType.Stunned } },
                { BoardPieceId.Verochka, new List<EffectStateType> { EffectStateType.CorruptedRage, EffectStateType.Diseased } },
                { BoardPieceId.Spider, new List<EffectStateType> { EffectStateType.Panic, EffectStateType.Tangled, EffectStateType.Diseased, EffectStateType.TangledEnemy, EffectStateType.Netted } },
                { BoardPieceId.GiantSlime, new List<EffectStateType> { EffectStateType.Panic, EffectStateType.Venom } },
                { BoardPieceId.Slimeling, new List<EffectStateType> { EffectStateType.Panic, EffectStateType.Venom } },
                { BoardPieceId.ElvenQueen, new List<EffectStateType> { EffectStateType.Stunned, EffectStateType.StunSelf, EffectStateType.Frozen, EffectStateType.Tangled, EffectStateType.Panic, EffectStateType.Blinded, EffectStateType.Confused, EffectStateType.CorruptedRage, EffectStateType.Corruption, EffectStateType.Disoriented, EffectStateType.Frozen, EffectStateType.Netted, EffectStateType.Panic, EffectStateType.Petrified } },
                { BoardPieceId.RatKing, new List<EffectStateType> { EffectStateType.Stunned, EffectStateType.StunSelf, EffectStateType.Frozen, EffectStateType.Panic, EffectStateType.Blinded, EffectStateType.Confused, EffectStateType.CorruptedRage, EffectStateType.Corruption, EffectStateType.Disoriented, EffectStateType.Frozen, EffectStateType.Netted, EffectStateType.Panic, EffectStateType.Petrified, EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns } },
                { BoardPieceId.WizardBoss, new List<EffectStateType> { EffectStateType.Stunned, EffectStateType.StunSelf, EffectStateType.Frozen, EffectStateType.Panic, EffectStateType.Blinded, EffectStateType.Confused, EffectStateType.CorruptedRage, EffectStateType.Corruption, EffectStateType.Disoriented, EffectStateType.Frozen, EffectStateType.Netted, EffectStateType.Panic, EffectStateType.Petrified, EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns } },
                { BoardPieceId.BossTown, new List<EffectStateType> { EffectStateType.Stunned, EffectStateType.StunSelf, EffectStateType.Frozen, EffectStateType.Panic, EffectStateType.Blinded, EffectStateType.Confused, EffectStateType.CorruptedRage, EffectStateType.Corruption, EffectStateType.Disoriented, EffectStateType.Frozen, EffectStateType.Netted, EffectStateType.Panic, EffectStateType.Petrified, EffectStateType.Weaken1Turn, EffectStateType.Weaken2Turns } },
            });

            var applyEffectOnHitRule = new ApplyEffectOnHitAdjustedRule(new Dictionary<BoardPieceId, EffectStateType>
            {
                { BoardPieceId.HealingBeacon, EffectStateType.Recovery },
                { BoardPieceId.Lure, EffectStateType.Disoriented },
                { BoardPieceId.HeroWarlock, EffectStateType.ExposeEnergy },
                { BoardPieceId.HeroSorcerer, EffectStateType.CorruptedRage },
                { BoardPieceId.Barricade, EffectStateType.Thorns },
                { BoardPieceId.EyeOfAvalon, EffectStateType.Revealed },
                { BoardPieceId.Torch, EffectStateType.Panic },
                { BoardPieceId.GasLamp, EffectStateType.Antidote },
                { BoardPieceId.IceLamp, EffectStateType.IceImmunity },
                { BoardPieceId.OilLamp, EffectStateType.FireImmunity },
                { BoardPieceId.VortexLamp, EffectStateType.Invisibility },
                { BoardPieceId.WaterLamp, EffectStateType.Recovery },
            });

            var targetEffectRule = new AbilityTargetEffectsRule(new Dictionary<AbilityKey, List<EffectStateType>>
            {
                { AbilityKey.PVPBlink, new List<EffectStateType> { EffectStateType.Weaken1Turn, EffectStateType.Disoriented } },
                { AbilityKey.TurretDamageProjectile, new List<EffectStateType> { EffectStateType.Panic } },
                { AbilityKey.AcidSpit, new List<EffectStateType> { EffectStateType.Diseased } },
                { AbilityKey.TauntingScream, new List<EffectStateType> { EffectStateType.Weaken2Turns, EffectStateType.Disoriented } },
                { AbilityKey.WarCry, new List<EffectStateType> { EffectStateType.Panic, EffectStateType.Blinded } },
            });

            // Heroes cahnges.
            var pieceUseWhenKilledRule = new PieceUseWhenKilledOverriddenRule(new Dictionary<BoardPieceId, List<AbilityKey>>
            {
                { BoardPieceId.ChestGoblin, new List<AbilityKey> { AbilityKey.EnemyDropStolenGoods, AbilityKey.DropChest } },
                { BoardPieceId.EarthElemental, new List<AbilityKey> { AbilityKey.EarthShatter } },
                { BoardPieceId.Tornado, new List<AbilityKey> { AbilityKey.LetItRain, AbilityKey.Overload } },
                { BoardPieceId.GiantSlime, new List<AbilityKey> { AbilityKey.AcidSpit, AbilityKey.SpawnSlime } },
                { BoardPieceId.GiantSpider, new List<AbilityKey> { AbilityKey.PoisonGas, AbilityKey.SpawnSpiderlings } },
                { BoardPieceId.SpiderEgg, new List<AbilityKey> { AbilityKey.SpiderWebshot, AbilityKey.SpawnSpiderlings } },
                { BoardPieceId.RatNest, new List<AbilityKey> { AbilityKey.RatBomb } },
            });

            var abilityActionCostRule = new AbilityActionCostAdjustedRule(new Dictionary<AbilityKey, bool>
            {
                { AbilityKey.SnakeBossLongRange, false },
                { AbilityKey.SpawnSpiderlings, false },
                { AbilityKey.SpiderWebshot, false },
                { AbilityKey.TauntingScream, false },
                { AbilityKey.DivineLight, false },
                { AbilityKey.SpawnGoldPile, false },
                { AbilityKey.LightningBolt, false },
                { AbilityKey.Sneak, false },
                { AbilityKey.Grab, true },
                { AbilityKey.BlindingLight, false },
                { AbilityKey.Whip, false },
                { AbilityKey.MinionCharge, false },
                { AbilityKey.CourageShanty, false },
                { AbilityKey.Weaken, false },
                { AbilityKey.DrainingKiss, false },
                { AbilityKey.MagicMissile, false },
                { AbilityKey.SpawnRandomLamp, false },
                { AbilityKey.BoobyTrap, false },
                { AbilityKey.BeastWhisperer, false },
                { AbilityKey.CoinFlip, false },
            });

            var abilityHealOverriddenRule = new AbilityHealOverriddenRule(new Dictionary<AbilityKey, int>
            {
                { AbilityKey.HealingPotion, 8 },
                { AbilityKey.Rejuvenation, 12 },
                { AbilityKey.AltarHeal, 15 },
                { AbilityKey.EnemyHumanHeal, 12 },
                { AbilityKey.TurretHealProjectile, 5 },
            });

            var abilityDamageAllRule = new AbilityDamageAllOverriddenRule(new Dictionary<AbilityKey, List<int>> // target, crit, splash, crit splash.
            {
                { AbilityKey.MagicMissile, new List<int> { 0, 1, 1, 1 } },
                { AbilityKey.SnakeBossLongRange, new List<int> { 0, 0, 0, 0 } },
                { AbilityKey.SnakeBossShortRange, new List<int> { 1, 1, 1, 1 } },
                { AbilityKey.EnemyFireball, new List<int> { 3, 3, 3, 3 } },
                { AbilityKey.EnemyFrostball, new List<int> { 2, 2, 2, 2 } },
                { AbilityKey.Zap, new List<int> { 2, 5, 3, 5 } },
                { AbilityKey.Fireball, new List<int> { 12, 21, 8, 18 } },
                { AbilityKey.Freeze, new List<int> { 4, 9, 2,  6 } },
                { AbilityKey.WhirlwindAttack, new List<int> { 4, 9, 4, 9 } },
                { AbilityKey.Charge, new List<int> { 4, 12, 4, 12 } },
                { AbilityKey.HeavensFury, new List<int> { 7, 11, 7, 11 } },
                { AbilityKey.ScrollElectricity, new List<int> { 5, 9, 3, 5 } },
                { AbilityKey.TurretHighDamageProjectile, new List<int> { 5, 9, 3, 6 } },
                { AbilityKey.EnemyArrowSnipe, new List<int> { 3, 7, 3, 7 } },
                { AbilityKey.ImplosionExplosionRain, new List<int> { 15, 20, 15, 20 } },
                { AbilityKey.GrapplingTotem, new List<int> { 2, 4, 2, 4 } },
                { AbilityKey.Whip, new List<int> { 2, 4, 3, 5 } },
                { AbilityKey.Shockwave, new List<int> { 8, 13, 8, 13 } },
                { AbilityKey.PlayerLeap, new List<int> { 2, 5, 2, 5 } },
                { AbilityKey.Arrow, new List<int> { 3, 7, 3, 7 } },
                { AbilityKey.DeathBeam, new List<int> { 11, 12, 8, 10 } }, // first number is damage to each thing it hits. Straight line.
                { AbilityKey.DeathFlurry, new List<int> { 8, 8, 5, 8 } }, // first number is damage to each thing it hits. AoE missles.
            });

            var backstabConfigRule = new BackstabConfigOverriddenRule(new List<BoardPieceId>
            {
                { BoardPieceId.HeroBard },
                { BoardPieceId.HeroRogue },
            });

            var abilityBackstabRule = new AbilityBackstabAdjustedRule(new Dictionary<AbilityKey, bool>
            {
                { AbilityKey.PiercingThrow, true },
                { AbilityKey.EnemyFireball, true },
                { AbilityKey.DiseasedBite, true },
                { AbilityKey.PoisonedTip, true },
            });

            var breaksStealthRule = new AbilityBreaksStealthAdjustedRule(new Dictionary<AbilityKey, bool>
            {
                { AbilityKey.PoisonBomb, false },
                { AbilityKey.FlashBomb, false },
                { AbilityKey.RepeatingBallista, false },
                { AbilityKey.DetectEnemies, false },
                { AbilityKey.HealingWard, false },
                { AbilityKey.MagicShield, false },
                { AbilityKey.PanicPowder, false },
                { AbilityKey.Portal, false },
                { AbilityKey.Rejuvenation, false },
                { AbilityKey.VortexDust, false },
                { AbilityKey.RevealPath, false },
                { AbilityKey.SpellPowerPotion, false },
                { AbilityKey.SummonElemental, false },
                { AbilityKey.Teleportation, false },
                { AbilityKey.TeleportLamp, false },
                { AbilityKey.TheBehemoth, false },
                { AbilityKey.WaterBottle, false },
                { AbilityKey.Weaken, false },
                { AbilityKey.WebBomb, false },
            });

            var abilityStealthDamageRule = new AbilityStealthDamageOverriddenRule(new Dictionary<AbilityKey, int>
            {
                { AbilityKey.DiseasedBite, 2 },
                { AbilityKey.PlayerMelee, 2 },
                { AbilityKey.EnemyFireball, 1 },
                { AbilityKey.EnemyJavelin, 1 },
            });

            var enemyCooldownRule = new EnemyCooldownOverriddenRule(new Dictionary<AbilityKey, int>
            {
                { AbilityKey.TeleportLamp, 2 },
                { AbilityKey.DrainingKiss, 2 },
                { AbilityKey.Electricity, 2 },
                { AbilityKey.AcidSpit, 3 },
                { AbilityKey.EnemyFireball, 2 },
                { AbilityKey.Grab, 2 },
                { AbilityKey.SnakeBossShortRange, 2 },
                { AbilityKey.SpawnSummoningLesserRift, 4 },
                { AbilityKey.ElvenSummonerDeflect, 5 },
            });

            var aoeAdjustedRule = new AbilityAoeAdjustedRule(new Dictionary<AbilityKey, int>
            {
                { AbilityKey.SongOfRecovery, 2 },
                { AbilityKey.SongOfResilience, 2 },
                { AbilityKey.FlashBomb, 1 },
                { AbilityKey.WebBomb, 1 },
                { AbilityKey.Fireball, 1 },
                { AbilityKey.WarCry, 1 },
            });

            var abilityRandomPieceRule = new AbilityRandomPieceListRule(new Dictionary<AbilityKey, List<BoardPieceId>>
            {
                { AbilityKey.BeastWhisperer, new List<BoardPieceId> { BoardPieceId.KillerBee, BoardPieceId.Spider, BoardPieceId.Spider, BoardPieceId.Spider } },
            });

            var tileEffectRule = new TileEffectDurationOverriddenRule(new Dictionary<TileEffect, int>
            {
                { TileEffect.Gas, 3 },
                { TileEffect.Acid, 3 },
                { TileEffect.Web, 4 },
                { TileEffect.Water, 7 },
                { TileEffect.Corruption, 2 },
                { TileEffect.Target, 0 },
            });

            var pieceExtraStatsRule = new PieceExtraStatsAdjustedRule(new Dictionary<BoardPieceId, int>
            {
                { BoardPieceId.HeroGuardian, 5 },
                { BoardPieceId.HeroHunter, 5 },
                { BoardPieceId.HeroBard, 5 },
                { BoardPieceId.HeroBarbarian, 5 },
                { BoardPieceId.HeroRogue, 5 },
                { BoardPieceId.HeroWarlock, 5 },
                { BoardPieceId.HeroSorcerer, 5 },
            });

            var pieceCounterDamageRule = new PieceCounterDamageRule(new Dictionary<BoardPieceId, int>
            {
                { BoardPieceId.SnakeTailBoss, 1 },
                { BoardPieceId.FireElemental, 1 },
                { BoardPieceId.IceElemental, 1 },
                { BoardPieceId.GiantSlime, 1 },
            });

            var pieceMagicStatsRule = new PieceMagicStatAddedRule(new Dictionary<BoardPieceId, int>
            {
                { BoardPieceId.ElvenQueen, 2 },
                { BoardPieceId.MotherCy, 3 },
            });

            var pieceDownedCountRule = new PieceDownedCountAdjustedRule(new Dictionary<BoardPieceId, int>
            {
                { BoardPieceId.HeroGuardian, 2 },
                { BoardPieceId.HeroHunter, 2 },
                { BoardPieceId.HeroBard, 2 },
                { BoardPieceId.HeroBarbarian, 2 },
                { BoardPieceId.HeroRogue, 2 },
                { BoardPieceId.HeroWarlock, 2 },
                { BoardPieceId.HeroSorcerer, 2 },
            });

            //var freeHealOnHitRule = new FreeHealOnHitRule(new List<BoardPieceId>
            //{
            //    { BoardPieceId.HeroBard },
            //    { BoardPieceId.HeroGuardian },
            //});

            //var freeHealOnCritRule = new FreeHealOnCritRule(new List<BoardPieceId>
            //{
            //    { BoardPieceId.HeroSorcerer },
            //});

            //var freeReplenishablesOnCritRule = new FreeReplenishablesOnCritRule(new List<BoardPieceId>
            //{
            //    { BoardPieceId.HeroBarbarian },
            //    { BoardPieceId.HeroBard },
            //    { BoardPieceId.HeroRogue },
            //    { BoardPieceId.HeroGuardian },
            //    { BoardPieceId.HeroSorcerer },
            //    { BoardPieceId.HeroHunter },
            //    { BoardPieceId.HeroWarlock },
            //});

            var freeAbilityOnCritRule = new FreeAbilityOnCritRule(new Dictionary<BoardPieceId, AbilityKey>
            {
                { BoardPieceId.HeroHunter, AbilityKey.WaterBottle },
                { BoardPieceId.HeroSorcerer, AbilityKey.WaterBottle },
                { BoardPieceId.HeroGuardian, AbilityKey.WaterBottle },
                { BoardPieceId.HeroRogue, AbilityKey.PanicPowder },
                { BoardPieceId.HeroBard, AbilityKey.Weaken },
                { BoardPieceId.HeroBarbarian, AbilityKey.SpawnRandomLamp },
                { BoardPieceId.HeroWarlock, AbilityKey.SpawnRandomLamp },
            });

            var statusEffectRule = new StatusEffectConfigRule(new List<StatusEffectData>
            {
                new StatusEffectData
                {
                    effectStateType = EffectStateType.SpellPower,
                    durationTurns = 4,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Bleeding1,
                    durationTurns = 1,
                    damagePerTurn = 7,
                    clearOnNewLevel = true,
                    tickWhen = StatusEffectsConfig.TickWhen.StartTurn,
                    applyAfterDissipate = EffectStateType.Bleeding2,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Bleeding2,
                    durationTurns = 1,
                    damagePerTurn = 12,
                    clearOnNewLevel = true,
                    tickWhen = StatusEffectsConfig.TickWhen.StartTurn,
                    applyAfterDissipate = EffectStateType.Bleeding3,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Bleeding3,
                    durationTurns = 1,
                    damagePerTurn = 18,
                    clearOnNewLevel = true,
                    tickWhen = StatusEffectsConfig.TickWhen.StartTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.ExtraAction,
                    durationTurns = 3,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                    applyAfterDissipate = EffectStateType.Tangled,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Berserk,
                    durationTurns = 3,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                    applyAfterDissipate = EffectStateType.Weaken1Turn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Netted,
                    durationTurns = 1,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.CorruptedRage,
                    durationTurns = 2,
                    damagePerTurn = 3,
                    damageTags = new DamageTag[(int)DamageTag.Unblockable],
                    clearOnNewLevel = true,
                    tickWhen = StatusEffectsConfig.TickWhen.StartTurn, // a giant slime, when corrupted had infinite actions. changed to tick on StartTurn.
                    // applyAfterDissipate = EffectStateType.Weaken1Turn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Antidote,
                    durationTurns = 5,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.IceImmunity,
                    durationTurns = 5,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.FireImmunity,
                    durationTurns = 5,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Courageous,
                    durationTurns = 4,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Heroic,
                    durationTurns = 4,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
                new StatusEffectData
                {
                    effectStateType = EffectStateType.Fearless,
                    durationTurns = 5,
                    damagePerTurn = 0,
                    clearOnNewLevel = false,
                    tickWhen = StatusEffectsConfig.TickWhen.EndTurn,
                },
            });

            var smallLevelSequenceRule = new SmallLevelSequenceOverriddenRule(new List<string>
            {
                "ElvenFloor17",
                "SewersFloor08",
                "SewersFloor11",
                "ForestFloor02",
                "ForestFloor01",
                "ElvenFloor14",
            });

            var levelPropertiesRule = new LevelPropertiesModifiedRule(new Dictionary<string, int>
            {
                { "BigGoldPileChance", 0 },
                { "FloorOneHealingFountains", 1 },
                { "FloorOnePotionStand", 1 },
                { "FloorOneMerchant", 0 },
                { "FloorOneLootChests", 3 },
                { "FloorOneGoldMaxAmount", 150 },
                { "FloorOneElvenSummoners", 0 },
                { "FloorOneSellswords", 1 },
                { "FloorOneVillagers", 2 },
                { "FloorTwoHealingFountains", 2 },
                { "FloorTwoPotionStand", 2 },
                { "FloorTwoMerchant", 0 },
                { "FloorTwoBeggars", 1 },
                { "FloorTwoVillagers", 2 },
                { "FloorTwoLootChests", 6 },
                { "FloorTwoGoldMaxAmount", 300 },
                { "FloorTwoElvenSummoners", 0 },
                { "FloorThreeHealingFountains", 1 },
                { "FloorThreePotionStand", 0 },
                { "FloorThreeMerchant", 0 },
                { "FloorThreeLootChests", 2 },
                { "FloorThreeElvenSummoners", 0 },
                { "PacingSpikeSegmentFloorThreeBudget", 12 },
            });

            var turnOrderRule = new TurnOrderOverriddenRule(new TurnOrderOverriddenRule.Scores // adjusted from GrayAlien's numbers. VoiceMachine has different cards.
            { Bard = 18, Guardian = 14, Warlock = 13, Sorcerer = 12, Barbarian = 11, Hunter = 10, Assassin = 9, Downed = -10, Javelin = 20, Deflect = 2, Mark = 2, Varga = 5 });

            // Points4Minions; // 0 for none. 1 for Cana. 2 for Arly. 3 for Cana and Arly.
            var pointGainRule = new PointGainRule(new PointGainRule.Points
            { PVPisOn = false, Points4Minions = 2, KillEnemy = 1, KillPlayer = -8, KillSelf = -10, KillBoss = 25, HurtEnemy = 1, HurtPlayer = -3, BuffPlayer = 1, HurtSelf = -5, HurtBoss = 3, Keyholder = 1, UnlockDoor = 20, LootGold = 3, LootChest = 4, LootStand = 5, OpenDoor = 1, UseFountain = 6, RevivePlayer = 4 });

            // var petsFocusHuntersMarkRule = new PetsFocusHunterMarkRule(true);
            var enemyRespawnDisabledRule = new EnemyRespawnDisabledRule(true);
            var cardEnergyFromAttackRule = new CardEnergyFromAttackMultipliedRule(3.0f); // base game starts at 0.25f
            var cardEnergyFromRecyclingRule = new CardEnergyFromRecyclingMultipliedRule(0.25f);
            var enemyHealthScaledRule = new EnemyHealthScaledRule(0.9f);
            var enemyAttackScaledRule = new EnemyAttackScaledRule(1.0f);
            var revolutionsRule = new HeroesRule(55);
            var progressRule = new HeroesPieceProgressRule(true);
            var progressLostRule = new HeroesPieceProgressLostRule(true);
            // var goldPickupRule = new GoldPickedUpMultipliedRule(1);
            var reviveEffectsRule = new ReviveRemovesEffectsRule(true);
            var courageShantyRule = new CourageShantyAddsHpRule(1);
            var tickRule = new HeroesTickAdjustedRule(true);

            return Ruleset.NewInstance(
                name,
                description,
                longdesc,
                // pieceKeyholderRule,
                progressLostRule,
                tickRule,
                revolutionsRule,
                progressRule,
                // grappleUnhookedRule,
                pieceDownedCountRule,
                pieceMagicStatsRule,
                pieceCounterDamageRule,
                // pieceDamageResistRule,
                pieceExtraStatsRule,
                // queenBuffsRule,
                // statModifiersRule,
                // goldPickupRule,
                // piecePieceTypeRule,
                piecesAdjustedRule,
                courageShantyRule,
                reviveEffectsRule,
                tileEffectRule,
                // myMonsterDeckRule,
                startingCardsRule,
                allowedChestCardsRule,
                allowedEnergyCardsRule,
                allowedPotionsRule,
                statusEffectRule,
                pieceAbilityRule,
                pieceBehaviourListRule,
                pieceImmunityRule,
                applyEffectOnHitRule,
                targetEffectRule,
                pieceUseWhenKilledRule,
                breaksStealthRule,
                abilityActionCostRule,
                abilityHealOverriddenRule,
                backstabConfigRule,
                turnOrderRule,
                pointGainRule,
                // freeHealOnHitRule,
                // freeHealOnCritRule,
                // freeReplenishablesOnCritRule,
                // freeActionPointsOnCritRule,
                freeAbilityOnCritRule,
                abilityBackstabRule,
                abilityStealthDamageRule,
                enemyCooldownRule,
                aoeAdjustedRule,
                abilityDamageAllRule,
                // partyElectricityRule,
                // pieceExtraImmunitiesRule,
                // petsFocusHuntersMarkRule,
                enemyRespawnDisabledRule,
                cardEnergyFromAttackRule,
                cardEnergyFromRecyclingRule,
                enemyHealthScaledRule,
                enemyAttackScaledRule,
                abilityRandomPieceRule,
                smallLevelSequenceRule,
                levelPropertiesRule);
        }
    }
}
